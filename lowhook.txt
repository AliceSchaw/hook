#define _WIN32_WINNT 0x0500   // PKBDLLHOOKSTRUCT  
#include <windows.h>  
  
//设置g_hWnd共享，禁止dll拷贝  
#pragma data_seg("MyHook")  
HWND g_hWnd = NULL;             //窗口句柄  
#pragma data_seg()  
#pragma comment(linker,"/section:MyHook,RWS")  
  
HHOOK g_hlowKeyHook = NULL;     //低级键盘钩子句柄  
HHOOK g_hMouse = NULL;          //鼠标钩子句柄  
  
//低级键盘钩子  

LRESULT CALLBACK Hotkey_Filter(int nCode, WPARAM wParam, LPARAM lParam)
{
	bool isClick = false;  
    PKBDLLHOOKSTRUCT LowKey = NULL;   //该结构体包含底层键盘输入事件的信息  
         
		WORD Ctrl_Pressed = HIBYTE( GetAsyncKeyState( VK_CONTROL ) );
		WORD Alt_Pressed = HIBYTE( GetAsyncKeyState(VK_MENU) ); 
    if (nCode == HC_ACTION)      //HC_ACTION  表示有消息  
    {  
        LowKey = (PKBDLLHOOKSTRUCT)lParam;  
        switch (wParam)  
        {  
        case WM_KEYDOWN:  
        case WM_SYSKEYDOWN:  
        case WM_KEYUP: {
			if(LowKey->vkCode=='R'){
				if (Ctrl_Pressed && Alt_Pressed ){
					//WinExec(KILL_SERVICES_VBS, SW_SHOWMAXIMIZED);  
					//system(KILL_SERVICES_VBS);
					//system(START_SERVICES_VBS);
					isClick = 1; 
					restartService();
					   
				}
			}
			if(LowKey->vkCode=='F'){
				if(Ctrl_Pressed && Alt_Pressed ){
					isClick = 1; 
					if(GetFileAttributes(KILL_SERVICES_VBS)<0)//==-1
					{
						//文件不存在！
					}
					else{
						//存在
					}
				}
			}
			break;
		}
        case WM_SYSKEYUP:  
            {       // 屏蔽Win  
                isClick = (LowKey->vkCode == VK_LWIN) || (LowKey->vkCode == VK_RWIN) ||    
                    // 屏蔽Alt+F4  
                    ((LowKey->vkCode == VK_F4) && ((LowKey->flags & LLKHF_ALTDOWN) != 0)) ||  
                    // 屏蔽Alt+Tab  
                    ((LowKey->vkCode == VK_TAB) && ((LowKey->flags & LLKHF_ALTDOWN) != 0)) ||  
                    // 屏蔽Alt+Esc  
                    ((LowKey->vkCode == VK_ESCAPE) && ((LowKey->flags & LLKHF_ALTDOWN) != 0)) ||  
                    // 屏蔽Ctrl+Esc  
                    ((LowKey->vkCode == VK_ESCAPE) && (Ctrl_Pressed != 0))||
		// 屏蔽Alt+~`
		((LowKey->vkCode == VK_OEM_3) && (Alt_Pressed != 0));  
                break;  
            }  
        default:  
            break;  
        }  
    }  
    if (isClick)  
    {  
        return 1;  
    }  
    return CallNextHookEx(g_hlowKeyHook,nCode,wParam,lParam);  //传给下一个钩子  
}
  
//屏蔽所有鼠标消息  
LRESULT CALLBACK MouseProc(int nCode, WPARAM wParam, LPARAM lParam)  
{  
    return 1;  
}  
  
//安装钩子  
void SetHook(HWND hWnd)  //为了操作窗体，我们将主窗体的句柄传进去  
{  
    g_hWnd = hWnd;       //将主窗体句柄传给全局句柄，然后便于在上面的钩子过程中使用  
    //安装低级键盘钩子  
    g_hlowKeyHook = SetWindowsHookEx(WH_KEYBOARD_LL,LowLevelKeyboardProc,GetModuleHandle("GHookDll"),0);  
    //安装鼠标钩子  
    g_hlowKeyHook = SetWindowsHookEx(WH_MOUSE,MouseProc,GetModuleHandle("GHookDll"),0);  
}   